
[dashboard_loadtimes]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = powermonitoring
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */10 * * * *
description = Gathers the loadtimes of dashboards and adds them to the powermonitoring index
enableSched = 1
realtime_schedule = 0
request.ui_dispatch_app = Dashboard-Intelligence-TA
request.ui_dispatch_view = Dashboard-Intelligence-TA
search = index=_internal source=*web_access.log uri_path=/en-US/app* NOT "static" host=**INSERT SERVERS HERE** earliest=-10m \
| rex field=uri_path "^(?:\/[a-zA-Z0-9-_]+){2}(?:\/)(?P<appName>[a-zA-Z0-9-_]+)" \
| rex field=uri_path "^(?:\/[a-zA-Z0-9-_]+){3}(?:\/)(?P<dashboardName>[a-zA-Z0-9-_]+)" \
| search appName!=launcher AND dashboardName!=search \
| eval startWebLoadTime=_time \
| table user, appName, dashboardName, startWebLoadTime, shcluster \
| dedup dashboardName startWebLoadTime \
| join type=inner appName user \
    [| rest /services/search/jobs splunk_server_group=**INSERT SERVER GROUP NAME HERE** \
    | search author!="splunk-system-user" AND author!="admin" AND eai:acl.app!=search \
    | rex field=sid "^(?:\_)(?P<searchKeyPower>[a-zA-Z0-9_]+)(?:\_\_)" \
    | rex field=sid "^(?:[a-z]+\_\_[a-z]+\_)(?P<searchKeyUser>[a-zA-Z0-9_]+)(?:\__)" \
    | eval searchKey = coalesce(searchKeyPower, searchKeyUser) \
    | search searchKey=* \
    | dedup published updated \
    | eval StartTime_epoch = strptime(published, "%Y-%m-%dT%H:%M:%S.%3N%z"), EndTime_epoch = strptime(updated, "%Y-%m-%dT%H:%M:%S.%3N%z") \
    | eval start=relative_time(now(),"-10min") \
    | where StartTime_epoch > start \
    | eval time_taken=EndTime_epoch-StartTime_epoch \
    | bucket span=5s StartTime_epoch \
    | stats max(EndTime_epoch) as maxEndTime by eai:acl.app StartTime_epoch author searchKey \
    | eval EndTime_epoch = strftime(maxEndTime, "%Y-%m-%d %H:%M:%S") \
    | rename eai:acl.app as appName, author AS user \
    | stats delim="," values(StartTime_epoch) as StartTime, values(EndTime_epoch) as EndTime by user appName searchKey] \
| makemv delim="," StartTime \
| makemv delim="," EndTime \
| streamstats count as "number" \
| mvexpand StartTime \
| streamstats count as "number2" by number \
| eval StartDiff = StartTime - startWebLoadTime \
| eval EndTime=strptime(EndTime, "%Y-%m-%d %H:%M:%S") \
| where StartDiff > -5 \
| eventstats min(StartDiff) as "Min_delta" by number \
| where StartDiff=Min_delta \
| mvexpand EndTime \
| streamstats count as "number3" by number number2 \
| where number2=number3 \
| eval searchDurationSecs=EndTime - startWebLoadTime \
| eval searchDurationMins = searchDurationSecs / 60 \
| eval StartTime = strftime(StartTime, "%Y-%m-%d %H:%M:%S"), searchTimestamp = strftime(startWebLoadTime, "%Y-%m-%d %H:%M:%S"), EndTime=strftime(EndTime, "%Y-%m-%d %H:%M:%S") \
| fields appName, dashboardName, searchTimestamp, searchDurationMins, searchDurationSecs, searchKey
